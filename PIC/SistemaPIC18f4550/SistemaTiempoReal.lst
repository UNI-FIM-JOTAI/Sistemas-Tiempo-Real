CCS PCH C Compiler, Version 5.008, 5967               04-abr-15 01:30

               Filename:   D:\IGNACIO\ProgramacionGitHub\Sistemas-Tiempo-Real\PIC\SistemaPIC18f4550\SistemaTiempoReal.lst

               ROM used:   330 bytes (1%)
                           Largest free fragment is 32434
               RAM used:   24 (1%) at main() level
                           26 (1%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   011E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   0096
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
*
00AA:  DATA 43,6F
00AC:  DATA 6E,65
00AE:  DATA 63,74
00B0:  DATA 61,64
00B2:  DATA 6F,2E
00B4:  DATA 2E,2E
00B6:  DATA 2E,2A
00B8:  DATA 00,00
00BA:  TBLRD*+
00BC:  MOVF   FF5,F
00BE:  BZ    00DA
00C0:  MOVFF  FF6,18
00C4:  MOVFF  FF7,19
00C8:  MOVF   FF5,W
00CA:  BTFSS  F9E.4
00CC:  BRA    00CA
00CE:  MOVWF  FAD
00D0:  MOVFF  18,FF6
00D4:  MOVFF  19,FF7
00D8:  BRA    00BA
00DA:  GOTO   0104 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=8       //Resolucion 8BITS 
.................... #use delay(clock=10000000)    //Oscilador de 10Mz 
.................... #use rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7,bits=8,parity=N)  // Configuracion de la comunicacion serial 
.................... #fuses HS,NOPROTECT,NOWDT,NOLVP,CPUDIV1,nomclr     // Configuracion de los Fuses 
....................  
.................... #use FAST_IO(A)  
.................... #use FAST_IO(B) 
.................... #use FAST_IO(D) 
....................  
.................... // Declaracion de Variables 
.................... char  rcvchar=0x00; 
.................... int1  flagcmd=0; 
....................  
....................  
.................... void inte_Init()  // interrupcion de puerto serial 
.................... { 
....................    enable_interrupts(GLOBAL); 
*
00F0:  MOVLW  C0
00F2:  IORWF  FF2,F
....................    enable_interrupts(INT_RDA); 
00F4:  BSF    F9D.5
00F6:  GOTO   0108 (RETURN)
.................... } 
....................  
.................... // Interrupcion por comunicacion serial 
.................... #INT_RDA 
.................... void serial_isr() 
.................... { 
....................    //printf("Recibido");     // se envia por Serial una palabra para verificar interrupcion 
....................    rcvchar = 0x00; 
*
0096:  CLRF   16
....................    rcvchar = getc();    // se recibe el caracter enviado por la computadora 
0098:  BTFSS  F9E.5
009A:  BRA    0098
009C:  MOVFF  FAE,16
....................    output_toggle(PIN_D6); 
00A0:  BTG    F8C.6
....................    flagcmd=1; 
00A2:  BSF    17.0
....................    //printf("%c", rcvchar ); 
....................    //delay_us(20); 
00A4:  BCF    F9E.5
00A6:  GOTO   0054
.................... } 
....................  
.................... void procesa_cmd(void){             // procesa el ultimo comando guardado, un comando esta comprendido entre $ hasta *  
....................   
....................    disable_interrupts(int_rda);      
*
010C:  BCF    F9D.5
....................    flagcmd=0;                       // Desactivo flag de comando pendiente. 
010E:  BCF    17.0
....................    //printf("Recibido"); 
....................    printf("%c", rcvchar ); 
0110:  MOVF   16,W
0112:  BTFSS  F9E.4
0114:  BRA    0112
0116:  MOVWF  FAD
....................    enable_interrupts(int_rda);             
0118:  BSF    F9D.5
011A:  GOTO   014A (RETURN)
.................... } 
....................  
....................  
.................... void Port_Init() 
.................... { 
....................    set_tris_b(0x00); 
*
00DE:  MOVLW  00
00E0:  MOVWF  F93
....................    set_tris_d(0x00); 
00E2:  MOVWF  F95
....................    set_tris_a(0x00); 
00E4:  MOVWF  F92
....................    output_b(0x00); 
00E6:  CLRF   F8A
....................    output_d(0x00); 
00E8:  CLRF   F8C
....................    output_a(0x00); 
00EA:  CLRF   F89
00EC:  GOTO   0106 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
.................... void MCU_Init() 
.................... { 
....................    printf("Conectado....*"); 
*
00FA:  MOVLW  AA
00FC:  MOVWF  FF6
00FE:  MOVLW  00
0100:  MOVWF  FF7
0102:  BRA    00BA
....................    Port_Init(); 
0104:  BRA    00DE
....................    inte_Init(); 
0106:  BRA    00F0
0108:  GOTO   0144 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
011E:  CLRF   FF8
0120:  BCF    FD0.7
0122:  BSF    07.7
0124:  BCF    FB8.3
0126:  MOVLW  40
0128:  MOVWF  FAF
012A:  MOVLW  A6
012C:  MOVWF  FAC
012E:  MOVLW  90
0130:  MOVWF  FAB
0132:  CLRF   16
0134:  BCF    17.0
0136:  MOVF   FC1,W
0138:  ANDLW  C0
013A:  IORLW  0F
013C:  MOVWF  FC1
013E:  MOVLW  07
0140:  MOVWF  FB4
.................... { 
....................    MCU_Init();    
0142:  BRA    00FA
....................    while(TRUE) 
....................    {   
....................       if(flagcmd){ 
0144:  BTFSS  17.0
0146:  BRA    014A
....................          procesa_cmd(); 
0148:  BRA    010C
....................       } 
014A:  BRA    0144
....................  
....................    } 
....................  
.................... } 
014C:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
